// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$String    = require("bs-platform/lib/js/string.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function explode(aString) {
  var _i = aString.length - 1 | 0;
  var _l = /* [] */0;
  while(true) {
    var l = _l;
    var i = _i;
    if (i < 0) {
      return l;
    } else {
      _l = /* :: */[
        Caml_string.get(aString, i),
        l
      ];
      _i = i - 1 | 0;
      continue ;
      
    }
  };
}

var code = "5 + 5 = 10";

var splitCode = List.filter((function (a) {
          return +(a !== /* " " */32);
        }))(explode(code));

function charToInt(aChar) {
  return Caml_format.caml_int_of_string($$String.make(1, aChar));
}

function checkArith(_charStream) {
  while(true) {
    var charStream = _charStream;
    if (charStream) {
      var tl = charStream[1];
      if (tl) {
        var match = tl[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var match$2 = match$1[1];
            if (match$2) {
              if (match$2[1]) {
                _charStream = tl;
                continue ;
                
              } else if (tl[0] === /* "+" */43 && match$1[0] === /* "=" */61) {
                return +((Caml_format.caml_int_of_string($$String.make(1, charStream[0])) + Caml_format.caml_int_of_string($$String.make(1, match[0])) | 0) === Caml_format.caml_int_of_string($$String.make(1, match$2[0])));
              } else {
                _charStream = tl;
                continue ;
                
              }
            } else {
              _charStream = tl;
              continue ;
              
            }
          } else {
            _charStream = tl;
            continue ;
            
          }
        } else {
          _charStream = tl;
          continue ;
          
        }
      } else {
        _charStream = tl;
        continue ;
        
      }
    } else {
      return /* false */0;
    }
  };
}

var answer = checkArith(splitCode);

console.log(answer);

var add = /* "+" */43;

var eq = /* "=" */61;

exports.explode    = explode;
exports.add        = add;
exports.eq         = eq;
exports.code       = code;
exports.splitCode  = splitCode;
exports.charToInt  = charToInt;
exports.checkArith = checkArith;
exports.answer     = answer;
/* splitCode Not a pure module */
